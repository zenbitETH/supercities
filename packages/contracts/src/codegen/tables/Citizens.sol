// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Citizens")));
bytes32 constant CitizensTableId = _tableId;

struct CitizensData {
  uint256 citizenId;
  uint256 verifiedCities;
  uint256 level;
  uint256 gamePoints;
  uint256 cityCommittedTo;
  string name;
  string roleAttestation;
}

library Citizens {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](7);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.UINT256;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.UINT256;
    _schema[5] = SchemaType.STRING;
    _schema[6] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](7);
    _fieldNames[0] = "citizenId";
    _fieldNames[1] = "verifiedCities";
    _fieldNames[2] = "level";
    _fieldNames[3] = "gamePoints";
    _fieldNames[4] = "cityCommittedTo";
    _fieldNames[5] = "name";
    _fieldNames[6] = "roleAttestation";
    return ("Citizens", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get citizenId */
  function getCitizenId(address citizen) internal view returns (uint256 citizenId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get citizenId (using the specified store) */
  function getCitizenId(IStore _store, address citizen) internal view returns (uint256 citizenId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set citizenId */
  function setCitizenId(address citizen, uint256 citizenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((citizenId)));
  }

  /** Set citizenId (using the specified store) */
  function setCitizenId(IStore _store, address citizen, uint256 citizenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((citizenId)));
  }

  /** Get verifiedCities */
  function getVerifiedCities(address citizen) internal view returns (uint256 verifiedCities) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get verifiedCities (using the specified store) */
  function getVerifiedCities(IStore _store, address citizen) internal view returns (uint256 verifiedCities) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set verifiedCities */
  function setVerifiedCities(address citizen, uint256 verifiedCities) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((verifiedCities)));
  }

  /** Set verifiedCities (using the specified store) */
  function setVerifiedCities(IStore _store, address citizen, uint256 verifiedCities) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((verifiedCities)));
  }

  /** Get level */
  function getLevel(address citizen) internal view returns (uint256 level) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get level (using the specified store) */
  function getLevel(IStore _store, address citizen) internal view returns (uint256 level) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set level */
  function setLevel(address citizen, uint256 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((level)));
  }

  /** Set level (using the specified store) */
  function setLevel(IStore _store, address citizen, uint256 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((level)));
  }

  /** Get gamePoints */
  function getGamePoints(address citizen) internal view returns (uint256 gamePoints) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get gamePoints (using the specified store) */
  function getGamePoints(IStore _store, address citizen) internal view returns (uint256 gamePoints) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set gamePoints */
  function setGamePoints(address citizen, uint256 gamePoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((gamePoints)));
  }

  /** Set gamePoints (using the specified store) */
  function setGamePoints(IStore _store, address citizen, uint256 gamePoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((gamePoints)));
  }

  /** Get cityCommittedTo */
  function getCityCommittedTo(address citizen) internal view returns (uint256 cityCommittedTo) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get cityCommittedTo (using the specified store) */
  function getCityCommittedTo(IStore _store, address citizen) internal view returns (uint256 cityCommittedTo) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set cityCommittedTo */
  function setCityCommittedTo(address citizen, uint256 cityCommittedTo) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((cityCommittedTo)));
  }

  /** Set cityCommittedTo (using the specified store) */
  function setCityCommittedTo(IStore _store, address citizen, uint256 cityCommittedTo) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((cityCommittedTo)));
  }

  /** Get name */
  function getName(address citizen) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, address citizen) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (string(_blob));
  }

  /** Set name */
  function setName(address citizen, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.setField(_tableId, _keyTuple, 5, bytes((name)));
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, address citizen, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.setField(_tableId, _keyTuple, 5, bytes((name)));
  }

  /** Get the length of name */
  function lengthName(address citizen) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 5, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, address citizen) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 5, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of name (unchecked, returns invalid data if index overflows) */
  function getItemName(address citizen, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 5, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of name (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemName(IStore _store, address citizen, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 5, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to name */
  function pushName(address citizen, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.pushToField(_tableId, _keyTuple, 5, bytes((_slice)));
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, address citizen, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.pushToField(_tableId, _keyTuple, 5, bytes((_slice)));
  }

  /** Pop a slice from name */
  function popName(address citizen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.popFromField(_tableId, _keyTuple, 5, 1);
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, address citizen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.popFromField(_tableId, _keyTuple, 5, 1);
  }

  /** Update a slice of name at `_index` */
  function updateName(address citizen, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.updateInField(_tableId, _keyTuple, 5, _index * 1, bytes((_slice)));
  }

  /** Update a slice of name (using the specified store) at `_index` */
  function updateName(IStore _store, address citizen, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.updateInField(_tableId, _keyTuple, 5, _index * 1, bytes((_slice)));
  }

  /** Get roleAttestation */
  function getRoleAttestation(address citizen) internal view returns (string memory roleAttestation) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (string(_blob));
  }

  /** Get roleAttestation (using the specified store) */
  function getRoleAttestation(IStore _store, address citizen) internal view returns (string memory roleAttestation) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (string(_blob));
  }

  /** Set roleAttestation */
  function setRoleAttestation(address citizen, string memory roleAttestation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.setField(_tableId, _keyTuple, 6, bytes((roleAttestation)));
  }

  /** Set roleAttestation (using the specified store) */
  function setRoleAttestation(IStore _store, address citizen, string memory roleAttestation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.setField(_tableId, _keyTuple, 6, bytes((roleAttestation)));
  }

  /** Get the length of roleAttestation */
  function lengthRoleAttestation(address citizen) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 6, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of roleAttestation (using the specified store) */
  function lengthRoleAttestation(IStore _store, address citizen) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 6, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of roleAttestation (unchecked, returns invalid data if index overflows) */
  function getItemRoleAttestation(address citizen, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 6, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of roleAttestation (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemRoleAttestation(
    IStore _store,
    address citizen,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 6, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to roleAttestation */
  function pushRoleAttestation(address citizen, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.pushToField(_tableId, _keyTuple, 6, bytes((_slice)));
  }

  /** Push a slice to roleAttestation (using the specified store) */
  function pushRoleAttestation(IStore _store, address citizen, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.pushToField(_tableId, _keyTuple, 6, bytes((_slice)));
  }

  /** Pop a slice from roleAttestation */
  function popRoleAttestation(address citizen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.popFromField(_tableId, _keyTuple, 6, 1);
  }

  /** Pop a slice from roleAttestation (using the specified store) */
  function popRoleAttestation(IStore _store, address citizen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.popFromField(_tableId, _keyTuple, 6, 1);
  }

  /** Update a slice of roleAttestation at `_index` */
  function updateRoleAttestation(address citizen, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.updateInField(_tableId, _keyTuple, 6, _index * 1, bytes((_slice)));
  }

  /** Update a slice of roleAttestation (using the specified store) at `_index` */
  function updateRoleAttestation(IStore _store, address citizen, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.updateInField(_tableId, _keyTuple, 6, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(address citizen) internal view returns (CitizensData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, address citizen) internal view returns (CitizensData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    address citizen,
    uint256 citizenId,
    uint256 verifiedCities,
    uint256 level,
    uint256 gamePoints,
    uint256 cityCommittedTo,
    string memory name,
    string memory roleAttestation
  ) internal {
    bytes memory _data = encode(citizenId, verifiedCities, level, gamePoints, cityCommittedTo, name, roleAttestation);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    address citizen,
    uint256 citizenId,
    uint256 verifiedCities,
    uint256 level,
    uint256 gamePoints,
    uint256 cityCommittedTo,
    string memory name,
    string memory roleAttestation
  ) internal {
    bytes memory _data = encode(citizenId, verifiedCities, level, gamePoints, cityCommittedTo, name, roleAttestation);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(address citizen, CitizensData memory _table) internal {
    set(
      citizen,
      _table.citizenId,
      _table.verifiedCities,
      _table.level,
      _table.gamePoints,
      _table.cityCommittedTo,
      _table.name,
      _table.roleAttestation
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, address citizen, CitizensData memory _table) internal {
    set(
      _store,
      citizen,
      _table.citizenId,
      _table.verifiedCities,
      _table.level,
      _table.gamePoints,
      _table.cityCommittedTo,
      _table.name,
      _table.roleAttestation
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (CitizensData memory _table) {
    // 160 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 160));

    _table.citizenId = (uint256(Bytes.slice32(_blob, 0)));

    _table.verifiedCities = (uint256(Bytes.slice32(_blob, 32)));

    _table.level = (uint256(Bytes.slice32(_blob, 64)));

    _table.gamePoints = (uint256(Bytes.slice32(_blob, 96)));

    _table.cityCommittedTo = (uint256(Bytes.slice32(_blob, 128)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 160) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 192;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.roleAttestation = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint256 citizenId,
    uint256 verifiedCities,
    uint256 level,
    uint256 gamePoints,
    uint256 cityCommittedTo,
    string memory name,
    string memory roleAttestation
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](2);
    _counters[0] = uint40(bytes(name).length);
    _counters[1] = uint40(bytes(roleAttestation).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        citizenId,
        verifiedCities,
        level,
        gamePoints,
        cityCommittedTo,
        _encodedLengths.unwrap(),
        bytes((name)),
        bytes((roleAttestation))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(address citizen) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));
  }

  /* Delete all data for given keys */
  function deleteRecord(address citizen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, address citizen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((citizen))));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
